"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics"); // tslint:disable-line:no-implicit-dependencies
const Observable_1 = require("rxjs/Observable");
const empty_1 = require("rxjs/observable/empty");
const of_1 = require("rxjs/observable/of");
const throw_1 = require("rxjs/observable/throw");
const operators_1 = require("rxjs/operators");
const __1 = require("..");
const node_1 = require("../../tasks/node");
class NodeWorkflow {
    constructor(_host, _options) {
        this._host = _host;
        this._options = _options;
        /**
         * Create the SchematicEngine, which is used by the Schematic library as callbacks to load a
         * Collection or a Schematic.
         */
        this._engineHost = new __1.NodeModulesEngineHost();
        this._engine = new schematics_1.SchematicEngine(this._engineHost);
        // Add support for schemaJson.
        const registry = new core_1.schema.CoreSchemaRegistry(schematics_1.formats.standardFormats);
        this._engineHost.registerOptionsTransform(__1.validateOptionsWithSchema(registry));
        this._engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.NodePackage);
        this._engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.RepositoryInitializer);
        // We need two sinks if we want to output what will happen, and actually do the work.
        // Note that fsSink is technically not used if `--dry-run` is passed, but creating the Sink
        // does not have any side effect.
        this._dryRunSink = new schematics_1.DryRunSink(this._host, this._options.force);
        this._fsSink = new schematics_1.HostSink(this._host, this._options.force);
        this._context = [];
    }
    get context() {
        const maybeContext = this._context[this._context.length - 1];
        if (!maybeContext) {
            throw new Error('Cannot get context when workflow is not executing...');
        }
        return maybeContext;
    }
    get reporter() {
        return this._dryRunSink.reporter;
    }
    execute(options) {
        /** Create the collection and the schematic. */
        const collection = this._engine.createCollection(options.collection);
        const schematic = collection.createSchematic(options.schematic);
        let error = false;
        const dryRunSubscriber = this._dryRunSink.reporter.subscribe(event => {
            error = error || (event.kind == 'error');
        });
        const parentContext = this._context[this._context.length - 1];
        const context = Object.assign({}, options, { debug: options.debug || false, logger: options.logger || new core_1.logging.NullLogger(), parentContext });
        this._context.push(context);
        return schematic.call(options.options, of_1.of(new schematics_1.HostTree(this._host)), {
            logger: options.logger || new core_1.logging.NullLogger(),
        }).pipe(operators_1.map(tree => schematics_1.Tree.optimize(tree)), operators_1.concatMap((tree) => {
            return this._dryRunSink.commit(tree).pipe(operators_1.ignoreElements(), operators_1.concat(of_1.of(tree)));
        }), operators_1.concatMap((tree) => {
            dryRunSubscriber.unsubscribe();
            if (error) {
                return throw_1._throw(new schematics_1.UnsuccessfulWorkflowExecution());
            }
            if (this._options.dryRun) {
                return empty_1.empty();
            }
            return this._fsSink.commit(tree);
        }), operators_1.concat(new Observable_1.Observable(obs => {
            if (!this._options.dryRun) {
                this._engine.executePostTasks().subscribe(obs);
            }
            else {
                obs.complete();
            }
        })), operators_1.ignoreElements(), operators_1.concat(new Observable_1.Observable(obs => {
            this._context.pop();
            obs.complete();
        })));
    }
}
exports.NodeWorkflow = NodeWorkflow;
//# sourceMappingURL=data:application/json;base64,