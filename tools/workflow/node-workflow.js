"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics"); // tslint:disable-line:no-implicit-dependencies
const node_1 = require("../../tasks/node");
const node_module_engine_host_1 = require("../node-module-engine-host");
const schema_option_transform_1 = require("../schema-option-transform");
/**
 * A workflow specifically for Node tools.
 */
class NodeWorkflow extends schematics_1.workflow.BaseWorkflow {
    constructor(host, options) {
        const engineHost = new node_module_engine_host_1.NodeModulesEngineHost();
        super({
            host,
            engineHost,
            force: options.force,
            dryRun: options.dryRun,
        });
        engineHost.registerOptionsTransform(schema_option_transform_1.validateOptionsWithSchema(this._registry));
        engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.NodePackage, {
            allowPackageManagerOverride: true,
            packageManager: options.packageManager,
            rootDirectory: options.root && core_1.getSystemPath(options.root),
        });
        engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.RepositoryInitializer, {
            rootDirectory: options.root && core_1.getSystemPath(options.root),
        });
        engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.RunSchematic);
        engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.TslintFix);
        this._context = [];
    }
    get engine() {
        return this._engine;
    }
    get engineHost() {
        return this._engineHost;
    }
}
exports.NodeWorkflow = NodeWorkflow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS13b3JrZmxvdy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvc2NoZW1hdGljcy90b29scy93b3JrZmxvdy9ub2RlLXdvcmtmbG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztHQU1HO0FBQ0gsK0NBQXNFO0FBQ3RFLDJEQUVvQyxDQUFFLCtDQUErQztBQUNyRiwyQ0FBdUQ7QUFFdkQsd0VBQW1FO0FBQ25FLHdFQUF1RTtBQUV2RTs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLHFCQUFRLENBQUMsWUFBWTtJQUNyRCxZQUNFLElBQW9CLEVBQ3BCLE9BS0M7UUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLCtDQUFxQixFQUFFLENBQUM7UUFDL0MsS0FBSyxDQUFDO1lBQ0osSUFBSTtZQUNKLFVBQVU7WUFFVixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1NBQ3ZCLENBQUMsQ0FBQztRQUVILFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxtREFBeUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMvRSxVQUFVLENBQUMsb0JBQW9CLENBQzdCLDBCQUFtQixDQUFDLFdBQVcsRUFDL0I7WUFDRSwyQkFBMkIsRUFBRSxJQUFJO1lBQ2pDLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYztZQUN0QyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxvQkFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDM0QsQ0FDRixDQUFDO1FBQ0YsVUFBVSxDQUFDLG9CQUFvQixDQUM3QiwwQkFBbUIsQ0FBQyxxQkFBcUIsRUFDekM7WUFDRSxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxvQkFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDM0QsQ0FDRixDQUFDO1FBQ0YsVUFBVSxDQUFDLG9CQUFvQixDQUFDLDBCQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xFLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQywwQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUvRCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBaUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBb0MsQ0FBQztJQUNuRCxDQUFDO0NBQ0Y7QUE5Q0Qsb0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgUGF0aCwgZ2V0U3lzdGVtUGF0aCwgdmlydHVhbEZzIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHtcbiAgd29ya2Zsb3csXG59IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzJzsgIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8taW1wbGljaXQtZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBCdWlsdGluVGFza0V4ZWN1dG9yIH0gZnJvbSAnLi4vLi4vdGFza3Mvbm9kZSc7XG5pbXBvcnQgeyBGaWxlU3lzdGVtRW5naW5lIH0gZnJvbSAnLi4vZGVzY3JpcHRpb24nO1xuaW1wb3J0IHsgTm9kZU1vZHVsZXNFbmdpbmVIb3N0IH0gZnJvbSAnLi4vbm9kZS1tb2R1bGUtZW5naW5lLWhvc3QnO1xuaW1wb3J0IHsgdmFsaWRhdGVPcHRpb25zV2l0aFNjaGVtYSB9IGZyb20gJy4uL3NjaGVtYS1vcHRpb24tdHJhbnNmb3JtJztcblxuLyoqXG4gKiBBIHdvcmtmbG93IHNwZWNpZmljYWxseSBmb3IgTm9kZSB0b29scy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVXb3JrZmxvdyBleHRlbmRzIHdvcmtmbG93LkJhc2VXb3JrZmxvdyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGhvc3Q6IHZpcnR1YWxGcy5Ib3N0LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGZvcmNlPzogYm9vbGVhbjtcbiAgICAgIGRyeVJ1bj86IGJvb2xlYW47XG4gICAgICByb290PzogUGF0aCxcbiAgICAgIHBhY2thZ2VNYW5hZ2VyPzogc3RyaW5nO1xuICAgIH0sXG4gICkge1xuICAgIGNvbnN0IGVuZ2luZUhvc3QgPSBuZXcgTm9kZU1vZHVsZXNFbmdpbmVIb3N0KCk7XG4gICAgc3VwZXIoe1xuICAgICAgaG9zdCxcbiAgICAgIGVuZ2luZUhvc3QsXG5cbiAgICAgIGZvcmNlOiBvcHRpb25zLmZvcmNlLFxuICAgICAgZHJ5UnVuOiBvcHRpb25zLmRyeVJ1bixcbiAgICB9KTtcblxuICAgIGVuZ2luZUhvc3QucmVnaXN0ZXJPcHRpb25zVHJhbnNmb3JtKHZhbGlkYXRlT3B0aW9uc1dpdGhTY2hlbWEodGhpcy5fcmVnaXN0cnkpKTtcbiAgICBlbmdpbmVIb3N0LnJlZ2lzdGVyVGFza0V4ZWN1dG9yKFxuICAgICAgQnVpbHRpblRhc2tFeGVjdXRvci5Ob2RlUGFja2FnZSxcbiAgICAgIHtcbiAgICAgICAgYWxsb3dQYWNrYWdlTWFuYWdlck92ZXJyaWRlOiB0cnVlLFxuICAgICAgICBwYWNrYWdlTWFuYWdlcjogb3B0aW9ucy5wYWNrYWdlTWFuYWdlcixcbiAgICAgICAgcm9vdERpcmVjdG9yeTogb3B0aW9ucy5yb290ICYmIGdldFN5c3RlbVBhdGgob3B0aW9ucy5yb290KSxcbiAgICAgIH0sXG4gICAgKTtcbiAgICBlbmdpbmVIb3N0LnJlZ2lzdGVyVGFza0V4ZWN1dG9yKFxuICAgICAgQnVpbHRpblRhc2tFeGVjdXRvci5SZXBvc2l0b3J5SW5pdGlhbGl6ZXIsXG4gICAgICB7XG4gICAgICAgIHJvb3REaXJlY3Rvcnk6IG9wdGlvbnMucm9vdCAmJiBnZXRTeXN0ZW1QYXRoKG9wdGlvbnMucm9vdCksXG4gICAgICB9LFxuICAgICk7XG4gICAgZW5naW5lSG9zdC5yZWdpc3RlclRhc2tFeGVjdXRvcihCdWlsdGluVGFza0V4ZWN1dG9yLlJ1blNjaGVtYXRpYyk7XG4gICAgZW5naW5lSG9zdC5yZWdpc3RlclRhc2tFeGVjdXRvcihCdWlsdGluVGFza0V4ZWN1dG9yLlRzbGludEZpeCk7XG5cbiAgICB0aGlzLl9jb250ZXh0ID0gW107XG4gIH1cblxuICBnZXQgZW5naW5lKCk6IEZpbGVTeXN0ZW1FbmdpbmUge1xuICAgIHJldHVybiB0aGlzLl9lbmdpbmUgYXMge30gYXMgRmlsZVN5c3RlbUVuZ2luZTtcbiAgfVxuICBnZXQgZW5naW5lSG9zdCgpOiBOb2RlTW9kdWxlc0VuZ2luZUhvc3Qge1xuICAgIHJldHVybiB0aGlzLl9lbmdpbmVIb3N0IGFzIE5vZGVNb2R1bGVzRW5naW5lSG9zdDtcbiAgfVxufVxuIl19