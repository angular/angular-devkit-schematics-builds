"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics"); // tslint:disable-line:no-implicit-dependencies
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const __1 = require("..");
const node_1 = require("../../tasks/node");
class NodeWorkflow {
    constructor(_host, _options) {
        this._host = _host;
        this._options = _options;
        this._reporter = new rxjs_1.Subject();
        /**
         * Create the SchematicEngine, which is used by the Schematic library as callbacks to load a
         * Collection or a Schematic.
         */
        this._engineHost = new __1.NodeModulesEngineHost();
        this._engine = new schematics_1.SchematicEngine(this._engineHost, this);
        // Add support for schemaJson.
        this._registry = new core_1.schema.CoreSchemaRegistry(schematics_1.formats.standardFormats);
        this._engineHost.registerOptionsTransform(__1.validateOptionsWithSchema(this._registry));
        this._engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.NodePackage);
        this._engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.RepositoryInitializer);
        this._engineHost.registerTaskExecutor(node_1.BuiltinTaskExecutor.RunSchematic);
        this._context = [];
    }
    get context() {
        const maybeContext = this._context[this._context.length - 1];
        if (!maybeContext) {
            throw new Error('Cannot get context when workflow is not executing...');
        }
        return maybeContext;
    }
    get registry() {
        return this._registry;
    }
    get reporter() {
        return this._reporter.asObservable();
    }
    execute(options) {
        const parentContext = this._context[this._context.length - 1];
        /** Create the collection and the schematic. */
        const collection = this._engine.createCollection(options.collection);
        // Only allow private schematics if called from the same collection.
        const allowPrivate = parentContext && parentContext.collection === options.collection;
        const schematic = collection.createSchematic(options.schematic, allowPrivate);
        // We need two sinks if we want to output what will happen, and actually do the work.
        // Note that fsSink is technically not used if `--dry-run` is passed, but creating the Sink
        // does not have any side effect.
        const dryRunSink = new schematics_1.DryRunSink(this._host, this._options.force);
        const fsSink = new schematics_1.HostSink(this._host, this._options.force);
        let error = false;
        const dryRunSubscriber = dryRunSink.reporter.subscribe(event => {
            this._reporter.next(event);
            error = error || (event.kind == 'error');
        });
        const context = Object.assign({}, options, { debug: options.debug || false, logger: options.logger || (parentContext && parentContext.logger) || new core_1.logging.NullLogger(), parentContext });
        this._context.push(context);
        return rxjs_1.concat(schematic.call(options.options, rxjs_1.of(new schematics_1.HostTree(this._host)), {
            logger: context.logger,
        }).pipe(operators_1.map(tree => schematics_1.Tree.optimize(tree)), operators_1.concatMap((tree) => {
            return rxjs_1.concat(dryRunSink.commit(tree).pipe(operators_1.ignoreElements()), rxjs_1.of(tree));
        }), operators_1.concatMap((tree) => {
            dryRunSubscriber.unsubscribe();
            if (error) {
                return rxjs_1.throwError(new schematics_1.UnsuccessfulWorkflowExecution());
            }
            if (this._options.dryRun) {
                return rxjs_1.EMPTY;
            }
            return fsSink.commit(tree);
        })), rxjs_1.concat(new rxjs_1.Observable(obs => {
            if (!this._options.dryRun) {
                this._engine.executePostTasks().subscribe(obs);
            }
            else {
                obs.complete();
            }
        })), rxjs_1.concat(new rxjs_1.Observable(obs => {
            this._context.pop();
            obs.complete();
        }))).pipe(operators_1.ignoreElements());
    }
}
exports.NodeWorkflow = NodeWorkflow;
//# sourceMappingURL=data:application/json;base64,